
<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Visualisation 3D Chambre {{ chambre.num }}</title>
  <style>
    canvas { display: block; margin: 0 auto; }
    body { margin: 0; background-color: #f0f0f0; }
  </style>
</head>
<body>
  <h1>Visualisation de la Chambre {{ chambre.num }}</h1>
  <div id="scene-container"></div>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r134/three.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/three/examples/js/controls/OrbitControls.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/three/examples/js/loaders/FontLoader.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/three/examples/js/geometries/TextGeometry.js"></script>

  <script>
    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    const renderer = new THREE.WebGLRenderer();
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.getElementById('scene-container').appendChild(renderer.domElement);

    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
    scene.add(ambientLight);

    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
    directionalLight.position.set(5, 10, 7.5);
    directionalLight.target.position.set(0, 0, 0);
    scene.add(directionalLight);
    scene.add(directionalLight.target);

    const floorGeometry = new THREE.PlaneGeometry(10, 10);
    const floorMaterial = new THREE.MeshStandardMaterial({ color: 0xcccccc, side: THREE.DoubleSide, metalness: 0, roughness: 0.5 });
    const floor = new THREE.Mesh(floorGeometry, floorMaterial);
    floor.rotation.x = -Math.PI / 2;
    scene.add(floor);

    // Walls
    const wallMaterial = new THREE.MeshStandardMaterial({ color: 0xffffff, side: THREE.DoubleSide });
    const wallGeometry = new THREE.PlaneGeometry(10, 3);

    const wall1 = new THREE.Mesh(wallGeometry, wallMaterial);
    wall1.position.set(0, 1.5, -5);
    scene.add(wall1);

    const wall2 = new THREE.Mesh(wallGeometry, wallMaterial);
    wall2.position.set(0, 1.5, 5);
    wall2.rotation.y = Math.PI;
    scene.add(wall2);

    const wall3 = new THREE.Mesh(wallGeometry, wallMaterial);
    wall3.position.set(-5, 1.5, 0);
    wall3.rotation.y = Math.PI / 2;
    scene.add(wall3);

    const wall4 = new THREE.Mesh(wallGeometry, wallMaterial);
    wall4.position.set(5, 1.5, 0);
    wall4.rotation.y = -Math.PI / 2;
    scene.add(wall4);

    const lits = {{lits|json_encode()|raw}};
    console.log(lits);

    const fontLoader = new THREE.FontLoader();
    fontLoader.load('https://cdn.jsdelivr.net/npm/three/examples/fonts/helvetiker_regular.typeface.json', function(font) {
      lits.forEach(lit => {
        const bedGeometry = new THREE.BoxGeometry(1, 0.5, 2);
        const bedColor = lit.status === 'libre' ? 0x44aa44 : 0xaa4444;
        const bedMaterial = new THREE.MeshStandardMaterial({ color: bedColor, metalness: 0, roughness: 0.5 });
        const bed = new THREE.Mesh(bedGeometry, bedMaterial);
        bed.position.set(lit.positionX, 0.25, lit.positionZ);
        scene.add(bed);

        const textGeometry = new THREE.TextGeometry(lit.id.toString(), {
          font: font,
          size: 0.3,
          height: 0.05
        });
        const textMaterial = new THREE.MeshBasicMaterial({ color: 0x000000 });
        const textMesh = new THREE.Mesh(textGeometry, textMaterial);
        textMesh.position.set(lit.positionX - 0.3, 0.6, lit.positionZ);
        scene.add(textMesh);
      });
    });

    camera.position.set(5, 5, 5);
    camera.lookAt(0, 0, 0);

    const controls = new THREE.OrbitControls(camera, renderer.domElement);
    controls.enableDamping = true;
    controls.dampingFactor = 0.25;
    controls.screenSpacePanning = false;
    controls.maxPolarAngle = Math.PI / 2;

    function animate() {
      requestAnimationFrame(animate);
      controls.update();
      renderer.render(scene, camera);
    }
    animate();

    window.addEventListener('resize', () => {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    });
    // scene3d.js
const raycaster = new THREE.Raycaster();
const mouse = new THREE.Vector2();

// Écouter les clics sur la scène
window.addEventListener('click', (event) => {
    // Convertir les coordonnées de la souris en coordonnées normalisées (-1 à +1)
    mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
    mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;

    // Lancer un rayon pour détecter les intersections
    raycaster.setFromCamera(mouse, camera);
    const intersects = raycaster.intersectObjects(scene.children, true);

    // Vérifier si un lit a été cliqué
    if (intersects.length > 0) {
        const clickedObject = intersects[0].object;

        // Vérifier si l'objet cliqué est un lit
        if (clickedObject.userData.isBed) {
            const bedId = clickedObject.userData.bedId;
            openPatientAssignmentModal(bedId); // Ouvrir une modale pour affecter un patient
        }
    }
});

function openPatientAssignmentModal(bedId) {
    // Ouvrir une modale ou un formulaire pour sélectionner un patient
    console.log(`Lit cliqué : ${bedId}`);
    // Envoyer une requête AJAX au backend Symfony
    assignPatientToBed(bedId);
}
  </script>
</body>
</html>